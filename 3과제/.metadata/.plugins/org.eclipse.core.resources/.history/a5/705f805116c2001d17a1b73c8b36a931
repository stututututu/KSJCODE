package windows;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.JButton;
import javax.swing.JScrollPane;

import bases.BaseFrame;
import bases.BaseLabel;
import bases.BasePanel;
import bases.BaseScrollPane;
import jdbc.DbManager;
import messge.Msg;
import res.AirTicketManager;

public class SeatChoseForm extends BaseFrame {

	private int selectNameRow = -1;

	private BaseScrollPane jspCenter;
	private BasePanel jpASeat;
	private BasePanel jpSeats;
	private BaseLabel jlPeopleCnt;
	private JButton jbDone;
	private Vector<BaseLabel> jlASeatData;
	private Vector<BaseLabel> jlBSeatData;
	private Vector<BaseLabel> jlCSeatData;
	private Vector<BaseLabel> jlDSeatData;
	private Vector<BaseLabel> jlESeatData;
	private BasePanel jpBSeat;
	private BasePanel jpCSeat;
	private BasePanel jpDSeat;
	private BasePanel jpESeat;
	private Vector<Vector> peopleData;
	private Vector<BaseLabel> boardingLabelData;

	private Vector<BasePanel> boardingPanelData;

	private Vector<Vector<String>> chosedSeatData;

	public SeatChoseForm(Vector<Vector> data) {
		// TODO Auto-generated constructor stub
		this.peopleData = data;
		setFrame("좌석선택", 726, 512);
	}
//	public SeatChoseForm() {
//		// TODO Auto-generated constructor stub
//		setFrame("좌석선택", 726, 512);
//	}

	@Override
	public void make() {
		// TODO Auto-generated method stub

		chosedSeatData = DbManager.db.getDb(
				"SELECT \r\n" + "	seat\r\n" + "FROM 2023지방_3.schedule as s\r\n" + "	join nation as n1\r\n"
						+ "		on s.depart = n1.n_no\r\n" + "	join nation as n2\r\n"
						+ "		on s.arrival = n2.n_no\r\n" + "	join reservation as r\r\n"
						+ "		on s.s_no = r.s_no\r\n" + "	join boarding as b\r\n" + "		on r.r_no = b.r_no\r\n"
						+ "where month(date) = ? and day(date) = ?\r\n" + "	and depart = ? and arrival = ?\r\n" + ";",
				AirTicketManager.month, AirTicketManager.day, AirTicketManager.depart, AirTicketManager.arrival);

		int vjpgap = 3;
		jpASeat = new BasePanel().setGrid(10, 1, 0, vjpgap);
		jpBSeat = new BasePanel().setGrid(10, 1, 0, vjpgap);
		jpCSeat = new BasePanel().setGrid(10, 1, 0, vjpgap);
		jpDSeat = new BasePanel().setGrid(10, 1, 0, vjpgap);
		jpESeat = new BasePanel().setGrid(10, 1, 0, vjpgap);

		jlASeatData = new Vector<BaseLabel>();
		jlBSeatData = new Vector<BaseLabel>();
		jlCSeatData = new Vector<BaseLabel>();
		jlDSeatData = new Vector<BaseLabel>();
		jlESeatData = new Vector<BaseLabel>();

		int lbSize = 60;
		for (int i = 0; i < 10; i++) {
			jlASeatData.add(new BaseLabel("A" + String.format("%02d", i + 1)).setLine().setPSize(lbSize, lbSize));
			jlBSeatData.add(new BaseLabel("B" + String.format("%02d", i + 1)).setLine().setPSize(lbSize, lbSize));
			jlCSeatData.add(new BaseLabel("C" + String.format("%02d", i + 1)).setLine().setPSize(lbSize, lbSize));
			jlDSeatData.add(new BaseLabel("D" + String.format("%02d", i + 1)).setLine().setPSize(lbSize, lbSize));
			jlESeatData.add(new BaseLabel("E" + String.format("%02d", i + 1)).setLine().setPSize(lbSize, lbSize));

			jpASeat.add(jlASeatData.get(i));
			jpBSeat.add(jlBSeatData.get(i));
			jpCSeat.add(jlCSeatData.get(i));
			jpDSeat.add(jlDSeatData.get(i));
			jpESeat.add(jlESeatData.get(i));

			for (Vector<String> row : chosedSeatData) {
				if (jlASeatData.get(i).getText().equals(row.get(0))) {
					jlASeatData.get(i).setBackground(Color.gray);
				}
				if (jlBSeatData.get(i).getText().equals(row.get(0))) {
					jlBSeatData.get(i).setBackground(Color.gray);
				}
				if (jlCSeatData.get(i).getText().equals(row.get(0))) {
					jlCSeatData.get(i).setBackground(Color.gray);
				}
				if (jlDSeatData.get(i).getText().equals(row.get(0))) {
					jlDSeatData.get(i).setBackground(Color.gray);
				}
				if (jlESeatData.get(i).getText().equals(row.get(0))) {
					jlESeatData.get(i).setBackground(Color.gray);
				}

			}
			
			HashMap<Integer, BaseLabel> selectSeat = new HashMap<>();
			
			int ii = i;
			jlASeatData.get(i).addMouseListener(new MouseAdapter() {

				@Override
				public void mousePressed(MouseEvent e) {
					// TODO Auto-generated method stub
					super.mousePressed(e);

					if (jlASeatData.get(ii).getBackground() != Color.white) {
						Msg.error("선택된 좌석은 선택이 불가능 합니다.");
						return;
					}

					System.out.println(jlASeatData.get(ii).getText());

					if (selectNameRow == -1) {
						Msg.error("승객을 선택해주세요.");
						return;
					}

					System.out.println(selectSeat.containsKey(selectNameRow));
					System.out.println(selectSeat);
					
					if(selectSeat.containsKey(selectNameRow)) {
						selectSeat.get(selectNameRow).setBackgroundCol(Color.WHITE);
					}else {
						selectSeat.put(selectNameRow, jlASeatData.get(ii));
						System.out.println("vvv");
					}

						
					jlASeatData.get(ii).setBackgroundRed();

					boardingLabelData.get(selectNameRow).setText(jlASeatData.get(ii).getText());

//					selectNameRow = -1;
//	
//
//					for (BasePanel basePanel : boardingPanelData) {
//						basePanel.setLine();
//					}

//					jlASeatData.get(ii).setBackgroundRed();

				}

			});
			jlBSeatData.get(i).addMouseListener(new MouseAdapter() {

				@Override
				public void mousePressed(MouseEvent e) {
					// TODO Auto-generated method stub
					super.mousePressed(e);

					if (jlBSeatData.get(ii).getBackground() != Color.white) {
						Msg.error("선택된 좌석은 선택이 불가능 합니다.");
						return;
					}

					System.out.println(jlBSeatData.get(ii).getText());

					if (selectNameRow == -1) {
						Msg.error("승객을 선택해주세요.");
						return;
					}

					boardingLabelData.get(selectNameRow).setText(jlBSeatData.get(ii).getText());

					selectNameRow = -1;

					for (BasePanel basePanel : boardingPanelData) {
						basePanel.setLine();
					}

					jlBSeatData.get(ii).setBackgroundRed();

				}

			});
			jlCSeatData.get(i).addMouseListener(new MouseAdapter() {

				@Override
				public void mousePressed(MouseEvent e) {
					// TODO Auto-generated method stub
					super.mousePressed(e);

					if (jlCSeatData.get(ii).getBackground() != Color.white) {
						Msg.error("선택된 좌석은 선택이 불가능 합니다.");
						return;
					}

					System.out.println(jlCSeatData.get(ii).getText());

					if (selectNameRow == -1) {
						Msg.error("승객을 선택해주세요.");
						return;
					}

					boardingLabelData.get(selectNameRow).setText(jlCSeatData.get(ii).getText());

					selectNameRow = -1;

					for (BasePanel basePanel : boardingPanelData) {
						basePanel.setLine();
					}

					jlCSeatData.get(ii).setBackgroundRed();

				}

			});
			jlDSeatData.get(i).addMouseListener(new MouseAdapter() {

				@Override
				public void mousePressed(MouseEvent e) {
					// TODO Auto-generated method stub
					super.mousePressed(e);

					if (jlDSeatData.get(ii).getBackground() != Color.white) {
						Msg.error("선택된 좌석은 선택이 불가능 합니다.");
						return;
					}

					System.out.println(jlDSeatData.get(ii).getText());

					if (selectNameRow == -1) {
						Msg.error("승객을 선택해주세요.");
						return;
					}

					boardingLabelData.get(selectNameRow).setText(jlDSeatData.get(ii).getText());

					selectNameRow = -1;

					for (BasePanel basePanel : boardingPanelData) {
						basePanel.setLine();
					}

					jlDSeatData.get(ii).setBackgroundRed();

				}

			});
			jlESeatData.get(i).addMouseListener(new MouseAdapter() {

				@Override
				public void mousePressed(MouseEvent e) {
					// TODO Auto-generated method stub
					super.mousePressed(e);

					if (jlESeatData.get(ii).getBackground() != Color.white) {
						Msg.error("선택된 좌석은 선택이 불가능 합니다.");
						return;
					}

					System.out.println(jlESeatData.get(ii).getText());

					if (selectNameRow == -1) {
						Msg.error("승객을 선택해주세요.");
						return;
					}

					boardingLabelData.get(selectNameRow).setText(jlESeatData.get(ii).getText());

					selectNameRow = -1;

					for (BasePanel basePanel : boardingPanelData) {
						basePanel.setLine();
					}

					jlESeatData.get(ii).setBackgroundRed();

				}

			});

		}

		jpSeats = new BasePanel();
		jspCenter = new BaseScrollPane(jpSeats);

		jlPeopleCnt = new BaseLabel("총 n명");
		jbDone = new JButton("선택완료");
	}

	@Override
	public void design() {
		// TODO Auto-generated method stub

		jpSeats.addChild();
		jpSeats.jpTop.setGrid(1, 5, 0, 0);
		jpSeats.jpTop.add(new BaseLabel("A").setTextCenter());
		jpSeats.jpTop.add(new BaseLabel("B").setTextCenter());
		jpSeats.jpTop.add(new BaseLabel("C").setTextCenter());
		jpSeats.jpTop.add(new BaseLabel("D").setTextCenter());
		jpSeats.jpTop.add(new BaseLabel("E").setTextCenter());

		jpSeats.jpLeft.setGrid(10, 1, 0, 50);
		jpSeats.jpRight.setGrid(10, 1, 0, 50);

		for (int i = 1; i <= 10; i++) {
			jpSeats.jpLeft.add(new BaseLabel(i + "").setTextCenter());
			jpSeats.jpRight.add(new BaseLabel(i + "").setTextCenter());
		}

		jpSeats.jpCenter.addChild();
		int jphgap = 3;
		jpSeats.jpCenter.jpLeft.setGrid(1, 2, jphgap, 0);
		jpSeats.jpCenter.jpRight.setGrid(1, 2, jphgap, 0);

		jpSeats.jpCenter.jpLeft.add(jpASeat);
		jpSeats.jpCenter.jpLeft.add(jpBSeat);
		jpSeats.jpCenter.jpCenter.add(jpCSeat);
		jpSeats.jpCenter.jpRight.add(jpDSeat);
		jpSeats.jpCenter.jpRight.add(jpESeat);

		int hemtygap = 50;
		jpSeats.jpCenter.jpCenter.setEmtyBorder(0, hemtygap, 0, hemtygap);
		jpSeats.jpCenter.setEmtyBorder(0, 10, 0, 10);

		jpLeft.add(jspCenter.setPSize(475, 0));

		jpCenter.addChild();
		jpCenter.jpTop.add(jlPeopleCnt.setTextLeft().setTextSize(20));

		jpCenter.jpCenter.setGrid(10, 1, 0, 5);

		boardingPanelData = new Vector<BasePanel>();
		boardingLabelData = new Vector<BaseLabel>();
		int i = 0;


		for (Vector row : peopleData) {

			boardingPanelData.add(new BasePanel());

			boardingPanelData.get(i).setFlowLeft();
			boardingPanelData.get(i).add(new BaseLabel(row.get(0) + " -"));
			boardingLabelData.add(new BaseLabel());

			boardingPanelData.get(i).add(boardingLabelData.get(i));
			boardingPanelData.get(i).setLine();

			int ii = i;
			boardingPanelData.get(i).addMouseListener(new MouseAdapter() {

				@Override
				public void mousePressed(MouseEvent e) {
					// TODO Auto-generated method stub
					super.mousePressed(e);

					for (BasePanel basePanel : boardingPanelData) {
						basePanel.setLine();
					}

					boardingPanelData.get(ii).setLine(Color.blue);

					selectNameRow = ii;

					System.out.println("selectNameRow : " + selectNameRow);
				}

			});

			jpCenter.jpCenter.add(boardingPanelData.get(i));

			i++;

		}

		jpCenter.jpBottom.add(jbDone);
	}

	@Override
	public void event() {
		// TODO Auto-generated method stub
		jbDone.addActionListener(e -> {
			for (int i = 0; i < peopleData.size(); i++) {

				if (boardingLabelData.get(i).getText().isBlank()) {
					Msg.error("승객 좌석을 모두 선택하세요.");
					return;
				}

			}
		});
	}

}
